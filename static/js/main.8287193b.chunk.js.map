{"version":3,"sources":["components/NavBar.js","components/Results.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","NavBar","classes","AppBar","position","Toolbar","variant","IconButton","edge","className","color","aria-label","Typography","maxWidth","media","height","Results","props","imageContents","images","Grid","container","map","img","item","xs","key","id","Card","CardActionArea","CardMedia","image","largeImageURL","title","tags","CardContent","gutterBottom","component","CardActions","Button","size","CircularProgress","disableShrink","Search","state","searchValue","amount","apiUrl","apiKey","handleChange","e","setState","target","name","value","axios","get","then","res","data","hits","catch","err","console","log","amountChange","Container","minWidth","style","TextField","label","type","fullWidth","onChange","this","Select","MenuItem","length","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8287193b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n// import Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n// import Container from '@material-ui/core/Container';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n  }));\r\n\r\nfunction NavBar() {\r\n    const classes = useStyles();\r\n    return (\r\n        <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n            Kings Image Library\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {GridList, GridTile} from '@material-ui/core/GridList'\r\n// import {GridList, GridListTile} from '@material-ui/core/GridList';\r\n// import IconButton from '@material-ui/core/IconButton'\r\n// import ZoomInIcon from '@material-ui/icons/ZoomIn';\r\n// import Dialogue from '@material-ui/core/Dialog'\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n// import Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      maxWidth: 345,\r\n    },\r\n    media: {\r\n      height: 300,\r\n    },\r\n  });\r\n\r\n\r\nfunction Results(props) {\r\n\r\n    let imageContents;\r\n        \r\n        const { images } = props;\r\n        const classes = useStyles();\r\n\r\n            \r\n\r\n        if(images){\r\n            imageContents = (\r\n            <Grid container spacing ={3}>\r\n\r\n\r\n\r\n                {images.map((img) =>{\r\n                    return (\r\n                        <Grid container item xs={4} key={img.id}>\r\n                            <Card className={classes.root}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={img.largeImageURL}\r\n          title={img.tags}\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {img.tags}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button size=\"small\" color=\"primary\">\r\n          Share\r\n        </Button>\r\n        <Button size=\"small\" color=\"primary\">\r\n          Learn More\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n                        </Grid>\r\n                        )\r\n                    \r\n                })}\r\n            </Grid>\r\n            )\r\n        }else{\r\n            imageContents = (<CircularProgress disableShrink />)\r\n        }\r\n        return (\r\n            <div>\r\n            {imageContents}\r\n            </div>\r\n        )\r\n    }\r\n\r\nResults.propTypes = {\r\n    images: PropTypes.array.isRequired\r\n}\r\n\r\n\r\nexport default Results\r\n\r\n        \r\n","import React, { Component } from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Container from '@material-ui/core/Container'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport axios from 'axios'\r\nimport Results from './Results'\r\n\r\n\r\n\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        searchValue: '',\r\n        amount: 10,\r\n        apiUrl: 'https://pixabay.com/api',\r\n        apiKey:  '18243940-c7f3bd88a81fdb14a68380617',\r\n        images: []\r\n    }\r\n\r\n    // handle input change\r\n    handleChange = (e)=> {\r\n        const {apiKey, apiUrl, searchValue, amount} = this.state\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        }, () =>{\r\n            axios.get(`${apiUrl}/?key=${apiKey}&q=${searchValue}&per_page=${amount}&safe-search=true&image_type=photo`)\r\n            .then(res => this.setState({images: res.data.hits}))\r\n            .catch(err => console.log(err))\r\n        })\r\n    }\r\n\r\n    // handle Select Change\r\n\r\n    amountChange = (e) =>{\r\n        this.setState({\r\n            amount: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n    \r\n    render() {\r\n        return (\r\n          <>  \r\n        <Container minWidth =\"sm\">\r\n            <header>\r\n              <h1 style={{color:\"blue\"}}>Search For your Favourite Images &nbsp;&nbsp;<span style={{color:'purple'}}>Explore our World of Pictures and Vision</span></h1>  \r\n            </header>\r\n\r\n            <TextField \r\n                name='searchValue' \r\n                label=\"Search For Images\" \r\n                type=\"search\"\r\n                fullWidth= {true}\r\n                onChange={this.handleChange}\r\n                value={this.state.searchValue}\r\n                \r\n            />\r\n            <br/>\r\n            <br/>\r\n            <Select\r\n                name=\"amount\"\r\n                aria-label=\"Filter Amount\"\r\n                value={this.state.amount}\r\n                onChange={this.amountChange}\r\n                \r\n            >\r\n                <MenuItem value=\"\">Filter Amount</MenuItem>\r\n                <MenuItem value={5}>5 Images </MenuItem>\r\n                <MenuItem value={10}>10 Images</MenuItem>\r\n                <MenuItem value={20}>20 Images</MenuItem>\r\n                <MenuItem value={30}>30 Images</MenuItem>\r\n        </Select>\r\n        {this.state.images.length > 0 ? <Results images={this.state.images}/> : console.log('images not found')}\r\n        </Container> \r\n        \r\n        \r\n        \r\n        </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search\r\n","\n\n\n\nimport React from 'react';\nimport NavBar from './components/NavBar'\nimport Search from './components/Search'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}